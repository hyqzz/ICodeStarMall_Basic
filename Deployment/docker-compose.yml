version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: seafood-mall-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: seafood_mall_db
      MYSQL_USER: seafood_user
      MYSQL_PASSWORD: seafood123
      TZ: Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
      - ./seafood-mall-backend/src/main/resources/db:/docker-entrypoint-initdb.d
      - ./mysql/conf.d:/etc/mysql/conf.d
    ports:
      - "3306:3306"
    networks:
      - seafood-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis缓存（可选）
  redis:
    image: redis:7-alpine
    container_name: seafood-mall-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - seafood-network
    command: redis-server --appendonly yes

  # 后端服务
  backend:
    build:
      context: ./seafood-mall-backend
      dockerfile: Dockerfile
    container_name: seafood-mall-backend
    restart: unless-stopped
    depends_on:
      - mysql
      - redis
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/seafood_mall_db?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
      SPRING_DATASOURCE_USERNAME: seafood_user
      SPRING_DATASOURCE_PASSWORD: seafood123
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      JWT_SECRET: tj31mg18e2XLPwvT1u4NV+O1NDK+AnhOHgJrfddR9nhNC+2AtOwgPy3hdXU5prFhwZDDVtWbUDSokvhwDuCB3A==
      JWT_EXPIRATION: 86400000
    ports:
      - "8080:8080"
    volumes:
      - uploads:/app/uploads
      - ./logs/backend:/app/logs
    networks:
      - seafood-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 管理后台
  admin:
    build:
      context: ./seafood-mall-admin
      dockerfile: Dockerfile
    container_name: seafood-mall-admin
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
    volumes:
      - ./nginx/admin.conf:/etc/nginx/conf.d/default.conf
    networks:
      - seafood-network

  # H5移动端
  h5:
    build:
      context: ./seafood-mall-h5
      dockerfile: Dockerfile
    container_name: seafood-mall-h5
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "81:80"
    volumes:
      - ./nginx/h5.conf:/etc/nginx/conf.d/default.conf
    networks:
      - seafood-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: seafood-mall-nginx
    restart: unless-stopped
    depends_on:
      - admin
      - h5
      - backend
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - seafood-network

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: seafood-mall-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - seafood-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana监控面板（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: seafood-mall-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - seafood-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  seafood-network:
    driver: bridge 